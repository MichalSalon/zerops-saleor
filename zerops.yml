storefront:
  build:
    base: [nodejs@16]
    prepare:
      - npm install -g pnpm@7.5.2
    build:
      - |
        cd react-storefront
        pnpm install --frozen-lockfile
        pnpm run generate
        pnpm run build:storefront
    deploy:
      - react-storefront/apps/storefront/~/dist
      - react-storefront/apps/storefront/~/.next
      - react-storefront/apps/storefront/~/build
      - react-storefront/apps/storefront/~/content/locales
      - react-storefront/apps/storefront/~/content/compiled-locales
    cache: [react-storefront/.turbo]
  run:
    start: pnpm turbo start
checkout:
  build:
    base: [nodejs@16]
    prepare:
      - npm install -g pnpm@7.5.2
    build:
      - |
        cd react-storefront
        pnpm install --frozen-lockfile
        pnpm run build:saleor-app-checkout
    deploy:
      - react-storefront/apps/saleor-app-checkout/~/dist
      - react-storefront/apps/saleor-app-checkout/~/.next
      - react-storefront/apps/saleor-app-checkout/~/build
      - react-storefront/apps/saleor-app-checkout/~/content/locales
      - react-storefront/apps/saleor-app-checkout/~/content/compiled-locales
    cache: [react-storefront/.turbo]
  run:
    start: pnpm turbo start
dashboard:
  build:
    base: [nodejs@14]
    build:
      - |
        cd saleor-dashboard
        npm install --frozen-lockfile --omit=dev
        npm run build
    deploy: [saleor-dashboard/build/dashboard/~/]
    cache: [saleor-dashboard/node_modules]
  run:
    start: npm start
api:
  build:
    base: [go@1]
    prepare:
      - apt update
      - apt install docker docker-compose -y
      - sudo systemctl enable docker.service
      - sudo systemctl enable containerd.service
      - sudo systemctl start docker
    build:
      - if [ -f "saleor-build-images.tar.gz" ]; then docker load -i saleor-build-images.tar.gz; fi
      - docker build --progress=plain --network=host --cache-from=saleor:build-python --cache-from=python:3.9 --target=build-python -t saleor:build-python saleor/.
      - docker build --progress=plain --network=host --cache-from=saleor:runtime --cache-from=saleor:build-python --cache-from=python:3.9-slim --build-arg STATIC_URL="/static/" -t saleor:runtime saleor/.
      - docker save python saleor | pigz > saleor-build-images.tar.gz
      - docker save saleor:runtime | pigz > saleor-runtime-image.tar.gz
      - docker system prune -af
    deploy: [docker-compose.yml, saleor-runtime-image.tar.gz, saleor/~/saleor/, saleor/~/templates/]
    cache: [saleor-build-images.tar.gz]
  run:
    prepare:
      - apt update
      - apt install docker docker-compose -y
      - sudo systemctl enable docker.service
      - sudo systemctl enable containerd.service
      - sudo systemctl start docker
    init:
      - if [[ "$(docker images -q saleor:runtime 2> /dev/null)" == "" ]]; then docker load -i saleor-runtime-image.tar.gz; fi
      - docker-compose run --rm api "python manage.py migrate" || true
      - if [ ! -f initialized.txt ]; then docker-compose run --rm api "python manage.py createsuperuser --superuser_password=$SUPER_USER_PASSWORD"; touch initialized.txt; fi
    start: docker-compose up api
worker:
  build:
    base: [go@1]
    prepare:
      - apt update
      - apt install docker docker-compose -y
      - sudo systemctl enable docker.service
      - sudo systemctl enable containerd.service
      - sudo systemctl start docker
    build:
      - if [ -f "saleor-build-images.tar.gz" ]; then docker load -i saleor-build-images.tar.gz; fi
      - docker build --progress=plain --network=host --cache-from=saleor:build-python --cache-from=python:3.9 --target=build-python -t saleor:build-python saleor/.
      - docker build --progress=plain --network=host --cache-from=saleor:runtime --cache-from=saleor:build-python --cache-from=python:3.9-slim --build-arg STATIC_URL="/static/" -t saleor:runtime saleor/.
      - docker save python saleor | pigz > saleor-build-images.tar.gz
      - docker save saleor:runtime | pigz > saleor-runtime-image.tar.gz
      - docker system prune -af
    deploy: [docker-compose.yml, saleor-runtime-image.tar.gz, saleor/~/saleor/, saleor/~/templates/]
    cache: [saleor-build-images.tar.gz]
  run:
    prepare:
      - apt update
      - apt install docker docker-compose -y
      - sudo systemctl enable docker.service
      - sudo systemctl enable containerd.service
      - sudo systemctl start docker
    init:
      - if [[ "$(docker images -q saleor:runtime 2> /dev/null)" == "" ]]; then docker load -i saleor-runtime-image.tar.gz; fi
    start: docker-compose up worker
mailhog:
  build:
    base: [go@1]
    prepare:
      - apt update
      - apt install docker docker-compose -y
      - sudo systemctl enable docker.service
      - sudo systemctl enable containerd.service
      - sudo systemctl start docker
    build:
      - |
        if [ -f "mailhog-image.tar.gz" ]; then exit 0; fi
        docker pull mailhog/mailhog:latest
        docker save mailhog/mailhog:latest | pigz > mailhog-image.tar.gz
        docker system prune -af
    deploy: [docker-compose.yml, mailhog-image.tar.gz]
    cache: [docker-compose.yml, mailhog-image.tar.gz]
  run:
    prepare:
      - apt update
      - apt install docker docker-compose -y
      - sudo systemctl enable docker.service
      - sudo systemctl enable containerd.service
      - sudo systemctl start docker
    init:
      - if [[ "$(docker images -q mailhog/mailhog:latest 2> /dev/null)" == "" ]]; then docker load -i mailhog-image.tar.gz; fi
    start: docker-compose up mailhog
jaeger:
  build:
    base: [go@1]
    prepare:
      - apt update
      - apt install docker docker-compose -y
      - sudo systemctl enable docker.service
      - sudo systemctl enable containerd.service
      - sudo systemctl start docker
    build:
      - |
        if [ -f "jaeger-image.tar.gz" ]; then exit 0; fi
        docker pull jaegertracing/all-in-one:latest
        docker save jaegertracing/all-in-one:latest | pigz > jaeger-image.tar.gz
        docker system prune -af
    deploy: [docker-compose.yml, jaeger-image.tar.gz]
    cache: [docker-compose.yml, jaeger-image.tar.gz]
  run:
    prepare:
      - apt update
      - apt install docker docker-compose -y
      - sudo systemctl enable docker.service
      - sudo systemctl enable containerd.service
      - sudo systemctl start docker
    init:
      - if [[ "$(docker images -q jaegertracing/all-in-one:latest 2> /dev/null)" == "" ]]; then docker load -i jaeger-image.tar.gz; fi
    start: docker-compose up jaeger
